AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Services: Lambda, S3, IAM Role, API Gateway, EventBridge, CloudWatch

  Completed:
  + Completed tasks from `template1.yaml`
  1. Create an event for the lambda function to be invoked automatically when the associated source code in the S3 bucket is modified or uploaded.

  Remaining Tasks:
  1. Include existing S3 Bucket in this template.

Parameters:
  MyAccountId:
    Description: My AWS account id
    Type: String
    Default: '050451366189'
  LambdaCodeS3BucketName:
    Description:
      The name of S3 bucket which contains all my lambda code zip files.
    Type: String
    Default: flame-lambda-code-bucket
  TestLambdaCodeS3Key:
    Type: String
    Default: test-lambda-code.zip
  MyUpdateLambdaCodeFunctionS3Key:
    Type: String
    Default: update-lambda-code.zip
  MyLambdaFunctionName:
    Type: String
    Default: FlameLambdaFunction
  MyUpdateLambdaCodeFunctionName:
    Type: String
    Default: FlameUpdateLambdaCodeFunction

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  ########## Policy ##########
  CloudWatchLambdaLoggingPolicy:
    # Type: AWS::IAM::Policy # Inline policies are not reusable and used for specific permissions
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allowing CloudWatch to log Lambda execution history
      ManagedPolicyName: CloudWatchLambdaLoggingPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              # - arn:aws:logs:<REGION>:<ACCOUNT>:log-group:<LOG_GROUP_NAME>/*
              - !Sub 'arn:aws:logs:${AWS::Region}:${MyAccountId}:log-group:*'

  LambdaS3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allowing Lambda to access the S3 objects.
      ManagedPolicyName: LambdaS3AccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${LambdaCodeS3BucketName}/*'
          - Effect: Allow
            Action:
              - lambda:UpdateFunctionCode
            Resource:
              - !GetAtt MyLambdaFunction.Arn

  UpdateLambdaCodePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        Allowing to update lambda functions when the associated source code in
        the S3 bucket is modified.
      ManagedPolicyName: UpdateLambdaCodePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:UpdateFunctionCode
            Resource:
              - !GetAtt MyLambdaFunction.Arn

  ######### EVENT ##########
  UpdateLambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        Event Rule to update the Lambda function when the associated object in
        the S3 bucket is modified.
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'Object Created'
        detail:
          bucket:
            name:
              - !Ref LambdaCodeS3BucketName
          object:
            key:
              - !Ref TestLambdaCodeS3Key
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: !Ref MyLambdaFunctionName

  ######### S3 #########
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LambdaCodeS3BucketName
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ######### Lambda #########
  # Define Lambda IAM Role
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Assumes an execution role when the user invoke lambda functions
      # Lambda function can access other AWS resources only if an execution role is defined and attached to the lambda function.
      # If a Lambda function doesn't need to interact with any other AWS resources, an execution role is not necessary.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt CloudWatchLambdaLoggingPolicy.Arn
        - !GetAtt LambdaS3AccessPolicy.Arnhttps://www.reddit.com/r/aws/comments/1de9u58/should_i_install_boto3_in_aws_lambda/#:~:text=Boto3%20is%20included%20in%20Lambda,the%20AWS%20docs%20for%20details.
        # - arn:aws:iam::aws:policy/AWSLambdaExecute # Provides Put, Get access to S3 and full access to CloudWatch Logs.

  MyUpdateLambdaCodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt UpdateLambdaCodePolicy.Arn

  MyLambdaFunction:
    # Type: AWS::Lambda::Function # For cloudFormation
    Type: AWS::Serverless::Function # For SAM
    Properties:
      Role: !GetAtt MyLambdaExecutionRole.Arn
      FunctionName: !Ref MyLambdaFunctionName
      Runtime: python3.12
      Handler: app.lambda_handler
      CodeUri:
        Bucket: !Ref LambdaCodeS3BucketName
        Key: !Ref TestLambdaCodeS3Key
      Events:
        RunCode:
          Type: Api
          Properties:
            Path: /run
            Method: get

  MyUpdateLambdaCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt MyUpdateLambdaCodeRole.Arn
      FunctionName: !Ref MyUpdateLambdaCodeFunction
      Runtime: python3.12
      Handler: app.lambda_handler
      CodeUri:
        Bucket: !Ref LambdaCodeS3BucketName
        Key: !Ref TestLambdaCodeS3Key
      Events:
        RunCode:
          Type: Api
          Properties:
            Path: /run
            Method: get

Outputs:
  MyLambdaFunctionArn:
    Description: ARN of the MyLambdaFunction
    Value: !GetAtt MyLambdaFunction.Arn
