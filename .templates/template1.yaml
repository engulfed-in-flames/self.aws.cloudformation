AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:
  Services - Lambda, S3, IAM Role, API Gateway, CloudWatch

  # Done:
  # 1. Create a policy configuring CloudWatch permissions to log for the Lambda function.
  # 2. Create a policy granting S3 bucket access to the Lambda function.
  # 3. Create an execution role for the Lambda function assuming aforementioned polices.
  # 4. Integrate a Lambda function with API Gateway.

  # To do:
  # 1. Create an event for the lambda function to be invoked automatically when the associated source code in the S3 bucket is modified or uploaded.

Parameters:
  MyLambdaCodeS3BucketName:
    Description:
      The name of S3 bucket which contains all my lambda code zip files.
    Type: String
  MyLambdaCodeS3key:
    Type: String
  MyLambdaFunctionName:
    Type: String

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  # Policy for logging Lambda execution with API Gateway
  CloudWatchLambdaLoggingPolicy:
    # Type: AWS::IAM::Policy # Inline policies are not reusable and used for specific permissions
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CloudWatchLambdaLoggingPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              # - arn:aws:logs:<REGION>:<ACCOUNT>:log-group:<LOG_GROUP_NAME>/*
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/lambda/*'

  # Policy for Lambda to access the target S3 resource
  LambdaS3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: LambdaS3AccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${MyLambdaCodeS3BucketName}/*'

  # Define Lambda IAM Role
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Assumes an execution role when the user invoke lambda functions
      # Lambda function can access other AWS resources only if an execution role is defined and attached to the lambda function.
      # If a Lambda function doesn't need to interact with any other AWS resources, an execution role is not necessary.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CloudWatchLambdaLoggingPolicy
        - !Ref LambdaS3AccessPolicy
        # - arn:aws:iam::aws:policy/AWSLambdaExecute # Provides Put, Get access to S3 and full access to CloudWatch Logs.

  MyLambdaFunction:
    # Type: AWS::Lambda::Function # For cloudFormation
    Type: AWS::Serverless::Function # For SAM
    Properties:
      Role: !GetAtt MyLambdaExecutionRole.Arn
      FunctionName: !Ref MyLambdaFunctionName
      Runtime: python3.12
      Handler: app.lambda_handler
      CodeUri:
        Bucket: !Ref MyLambdaCodeS3BucketName
        Key: !Ref MyLambdaCodeS3key
      Events:
        RunCode:
          Type: Api
          Properties:
            Path: /run
            Method: get

Outputs:
  MyLambdaFunctionArn:
    Description: ARN of the MyLambdaFunction
    Value: !GetAtt MyLambdaFunction.Arn
