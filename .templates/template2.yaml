AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:
  CloudWatch, API Gateway, LambdaExecutionRole, Event Source Mapping, Lambda

Parameters:
  MyAccountId:
    Description: My AWS account id
    Type: String
    Default: 050451366189
  MyLambdaCodeS3BucketName:
    Description:
      The name of S3 bucket which contains all my lambda code zip files.
    Type: String
    Default: my-lambda-code-bucket
  MyLambdaCodeS3key:
    Type: String
    Default: my-lambda-code.zip
  MyDynamoDBTableName:
    Type: String
    Default: my-dynamodb-table

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  ########## Policy ##########
  # Policy for accessing CloudWatch
  LambdaCloudWatchLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaCloudWatchLoggingPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              # - arn:aws:logs:<REGION>:<ACCOUNT>:log-group:/<LOG_GROUP_NAME>/*
              - !Sub 'arn:aws:logs:*:${MyAccountId}:*'

  # Policy for accessing S3
  LambdaS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaS3AccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:*:${MyAccountId}:${MyLambdaCodeS3BucketName}/*'

  # Policy for accessing dynamodb
  LambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !Sub 'arn:aws:dynamodb:*:${MyAccountId}:table/${MyDynamoDBTableName}'

  ######### Lambda #########
  # Define Lambda IAM Role
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Assumes an execution role when the user invoke lambda functions
      # Lambda function can access other AWS resources only if an execution role is defined and attached to the lambda function.
      # If a Lambda function doesn't need to interact with any other AWS resources, an execution role is not necessary.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - !Ref LambdaCloudWatchLoggingPolicy
        - !Ref LambdaS3AccessPolicy
        - !Ref LambdaDynamoDBAccessPolicy

  MyLambdaFunction:
    # Type: AWS::Lambda::Function # For cloudFormation
    Type: AWS::Serverless::Function # For SAM
    Properties:
      Role: !GetAtt MyLambdaExecutionRole.Arn
      FunctionName: MyLambdaFunction
      Runtime: python3.12
      Handler: app.lambda_handler
      Code:
        S3Bucket: !Ref MyLambdaCodeS3BucketName
        S3Key: !Ref MyLambdaCodeS3key

  MyEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      StartingPosition: LATEST
      BatchSize: 10

Outputs:
  MyLambdaFunctionArn:
    Description: ARN of the MyLambdaFunction
    Value: !GetAtt MyLambdaFunction.Arn

  MyEventSourceMappingUUID:
    Description: UUID of the Event Source Mapping
    Value: !GetAtt MyEventSourceMapping.UUID
