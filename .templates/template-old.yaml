AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template to create a PostgreSQL RDS instance and VPC for Lambda integration.

Parameters:
  CreateNewS3Bucket:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Determine whether to create a new S3 bucket.

  S3BucketName:
    Type: String
    Description: If not creating a new S3 bucket, provide the existing bucket name
    Default: flame-bucket

Conditions:
  CreateNewBucket: !Equals [!Ref CreateNewS3Bucket, 'true']

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  # S3 Bucket
  FlameS3Bucket:
    Type: AWS::S3::Bucket
    # Condition: CreateNewBucket
    Properties:
      BucketName: !Ref S3BucketName

  # Policy for S3 Bucket
  # FlameS3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !If
  #       - CreateNewBucket
  #       - !Ref FlameS3Bucket
  #       - !Ref S3BucketName
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS: arn:aws:iam::050451366189:root # Actual AWS Account ID
  #           Action:
  #             - s3:PutObject
  #             - s3:GetObject
  #             - s3:PutObjectAcl
  #             - s3:GetObjectAcl
  #           Resource: !If
  #             - CreateNewBucket
  #             - !Sub 'arn:aws:s3:::${FlameS3Bucket}/*'
  #             - !Sub 'arn:aws:s3:::${S3BucketName}/*'

  # Lambda Security Group
  FlameLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda to connect to RDS
      VpcId: !Ref FlameVPC

  # Security Group for RDS
  # Description: Limits access to the PostgreSQL database (port 5432) within the VPC.
  FlameDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming traffic to PostgreSQL from Lambda
      VpcId: !Ref FlameVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref FlameLambdaSecurityGroup

  # Subnet
  # Description: Public Subnet & Private Subnet are important to isolate your resources.
  #              The public subnet is needed for a network communication which requires internet access.
  #              The private subnet is needed for the security of RDS instance
  FlamePublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FlameVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: FlamePublicSubnet

  FlamePrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FlameVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: FlamePrivateSubnet

  # RDS DB Subnet Group (Required for VPC)
  FlameDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref FlamePrivateSubnet
        - !Ref FlamePublicSubnet

  # VPC Security Group (>> DB Security Group)
  # Description: VPC Security Group is the current standard setup where the RDS instance is running.
  #              Lambda functions need to be attached to a VPC to make them interact with RDS instances in a private VPC
  # CIDR Block: https://www.youtube.com/watch?v=OqsXzkXfwRw
  FlameVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FlameVPC

  # Internet Gateway
  # Description: Internet Gateway & Route Table allows the public subnet to route traffic to the internet.
  #              In this case, direct internet accesses to the private subnet is not allowed.
  FlameInternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  FlameVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FlameVPC
      InternetGatewayId: !Ref FlameInternetGateway

  # Route Table for Public Subnet
  FlamePublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FlameVPC
      Tags:
        - Key: Name
          Value: FlamePublicRouteTable

  # Public Route
  FlamePublicRoute:
    Type: AWS::EC2::Route
    DependsOn: FlameVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref FlamePublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref FlameInternetGateway

  # Associate Route Table with Public Subnet
  FlamePublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FlamePublicSubnet
      RouteTableId: !Ref FlamePublicRouteTable

  FlameDB:
    Type: AWS::RDS::DBInstance # Aurora DBクラスターにて、新しいDBインスタンスを作成
    Properties:
      DBInstanceIdentifier: lambda-rds-db
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: '20'
      Engine: postgres
      DBName: lambda-rds
      MasterUsername: postgres
      MasterUserPassword: postgres_1357
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: io2
      DeletionProtection: false

      Tags:
        - Key: Name
          Value: FlameDB
      VPCSecurityGroups:
        - !Ref FlameDBSecurityGroup
      DBSubnetGroupName: !Ref FlameDBSubnetGroup
    DeletionPolicy: Delete # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html

  # Define Lambda IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole # Crucial policy when the Lambda function needs to access resources in a VPC such as RDS instances.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3:amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectAcl
                  - s3:GetObjectAcl
                Resource: !If
                  - CreateNewBucket
                  - !Ref FlameS3Bucket
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
  # Useful for monitoring Lambda executions from the CloudWatch
  #   - PolicyName: LambdaLoggingPolicy
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - logs:CreateLogGroup
  #             - logs:CreateLogStream
  #             - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*

  FlameLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: src/flame_lambda/
      Handler: app.lambda_handler
      Runtime: python3.12
      VpcConfig:
        SecurityGroupIds:
          - !Ref FlameLambdaSecurityGroup
        SubnetIds:
          - !Ref FlamePrivateSubnet
      Environment:
        Variables:
          DB_HOST: !GetAtt FlameDB.Endpoint.Address
          DB_NAME: lambda-rds
          DB_USER: postgres
          DB_PASSWORD: postgres_1357

  ##### Lambda - DynamoDB #####
  # Define Lambda functions
  ListInvoicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_invoices/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        ListInvoices:
          Type: Api # 'Api'に指定すると、API Gatewayにエンドポイントが作成される。
          Properties:
            Path: /invoices
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable
  CreateInvoiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_invoice/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        CreateInvoice:
          Type: Api
          Properties:
            Path: /invoices
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable
  UpdateInvoiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_invoice/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        UpdateInvoice:
          Type: Api
          Properties:
            Path: /invoices/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable
  DeleteInvoiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_invoice/
      Handler: app.lambda_handler
      Runtime: python3.12
      Events:
        DeleteInvoice:
          Type: Api
          Properties:
            Path: /invoices/{id}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable

  # Define DynamoDB tables
  InvoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Invoices'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 10 # 設定値を超えると, `ThrottlingException`が発生
        WriteCapacityUnits: 5

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref FlameVPC

  DBSecurityGroupId:
    Description: Security Group ID for RDS
    Value: !Ref FlameDBSecurityGroup

  DBEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt FlameDB.Endpoint.Address
